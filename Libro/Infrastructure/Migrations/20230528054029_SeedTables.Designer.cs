// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(LibroDbContext))]
    [Migration("20230528054029_SeedTables")]
    partial class SeedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Description = "One of the first internationally known female writers who had to use a disguised name to have their books published.",
                            Name = "J.K.Rowling"
                        },
                        new
                        {
                            AuthorId = 2,
                            Description = "Born in London, this author was very well know for his mysterious short stories and mysterious death. ",
                            Name = "Edgar Allen Poe"
                        },
                        new
                        {
                            AuthorId = 3,
                            Description = "Known for his creepy and horror novels that have unecpected plot twists",
                            Name = "Stephen King"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AuthorToBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsToBooks", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("BookStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            BookStatus = 0,
                            PageAmount = 0,
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Casque of Amontillado"
                        },
                        new
                        {
                            BookId = 2,
                            BookStatus = 0,
                            PageAmount = 0,
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Masque of Red Death"
                        },
                        new
                        {
                            BookId = 3,
                            BookStatus = 0,
                            PageAmount = 0,
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "IT"
                        },
                        new
                        {
                            BookId = 4,
                            BookStatus = 0,
                            PageAmount = 0,
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and The Chamber of Secrets"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("BookGenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookGenreId = 0,
                            Genre = "Romance"
                        },
                        new
                        {
                            BookGenreId = 9,
                            Genre = "Mystery"
                        },
                        new
                        {
                            BookGenreId = 11,
                            Genre = "Horror"
                        },
                        new
                        {
                            BookGenreId = 1,
                            Genre = "Comedy"
                        },
                        new
                        {
                            BookGenreId = 2,
                            Genre = "Children"
                        },
                        new
                        {
                            BookGenreId = 6,
                            Genre = "Action"
                        },
                        new
                        {
                            BookGenreId = 4,
                            Genre = "Fiction"
                        },
                        new
                        {
                            BookGenreId = 10,
                            Genre = "Historical"
                        },
                        new
                        {
                            BookGenreId = 5,
                            Genre = "NonFiction"
                        },
                        new
                        {
                            BookGenreId = 3,
                            Genre = "Science"
                        },
                        new
                        {
                            BookGenreId = 7,
                            Genre = "Science Fition"
                        },
                        new
                        {
                            BookGenreId = 12,
                            Genre = "Fantasy"
                        },
                        new
                        {
                            BookGenreId = 8,
                            Genre = "Realistic Fiction"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookToBookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookGenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "BookGenreId");

                    b.HasIndex("BookGenreId");

                    b.ToTable("BooksToBookGenres", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookTransaction", b =>
                {
                    b.Property<int>("BookTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookTransactionId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATE");

                    b.Property<int>("Fine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("DATE");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookTransactionId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookTransactions");

                    b.HasData(
                        new
                        {
                            BookTransactionId = 1,
                            BookId = 1,
                            BorrowDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fine = 0,
                            UserId = 3
                        },
                        new
                        {
                            BookTransactionId = 2,
                            BookId = 2,
                            BorrowDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fine = 0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Rami@gmail.com",
                            PasswordHash = "VXrG9IvunWZg5YRoF1RyXr8f4EEoUv7/qOsSAXpeUhw=",
                            PasswordSalt = "3xxxlRX/mVEA1fLXpeXXBw==",
                            Role = 0,
                            Username = "Rami"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "RayyanTawfieg@gmail.com",
                            PasswordHash = "X88lHyDC9YtO1Rthn6ZAxdDi2AIV71S8ULXM4ayd9pA=",
                            PasswordSalt = "3xxxlRX/mVEA1fLXpeXXBw==",
                            Role = 1,
                            Username = "Rayyan"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "Raneenasia101@gmail.com",
                            PasswordHash = "TUZytoJf+gvgM1nFZtoO3/G+SC7sSDCOgOtyblDB5Ws=",
                            PasswordSalt = "3xxxlRX/mVEA1fLXpeXXBw==",
                            Role = 2,
                            Username = "Raneen"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AuthorToBook", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Domain.Entities.BookToBookGenre", b =>
                {
                    b.HasOne("Domain.Entities.BookGenre", "BookGenre")
                        .WithMany()
                        .HasForeignKey("BookGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookGenre");
                });

            modelBuilder.Entity("Domain.Entities.BookTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
